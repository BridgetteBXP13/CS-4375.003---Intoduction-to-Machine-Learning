df <- read.csv("mushrooms.csv")
str(df)
df <- read.csv("mushrooms.csv")
str(df)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
df <- read.csv("mushrooms.csv")
str(df)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mean(df$class)
df <- read.csv("mushrooms.csv")
str(df)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
df <- read.csv("covtype.csv")
str(df)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
par(mfrow=c(1,2))
plot(Hillshade_9am, Elevation, main="Elevation", ylab="", varwidth=TRUE )
par(mfrow=c(1,2))
plot(ESR, Elevation, main="Elevation", ylab="", varwidth=TRUE )
par(mfrow=c(1,2))
plot(Hillshade_Noon, Elevation, main="Elevation", ylab="", varwidth=TRUE )
par(mfrow=c(1,2))
plot(Hillshade9am, Elevation, main="Elevation", ylab="", varwidth=TRUE )
hist(train$Elevation)
hist(train$Elevation)
scatter(train$Horizontal_Distance_To_Hydrology)
hist(train$Elevation)
plot(train$Horizontal_Distance_To_Hydrology)
hist(train$Elevation)
plot(train$Elevation, train$Hillshade_9am)
hist(train$Elevation)
pairs(train)
hist(train$Elevation)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("a", "b", "c", "d"))
hist(train$Elevation)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("grean", "blue", "yellow", "red"))
hist(train$Elevation)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
df <- read.csv("covtype.csv")
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
glm1 <- glm(Cover_Type~Elevation, data=train, family=binomial)
glm1 <- glm(Slope~Elevation, data=train, family=binomial)
glm1 <- glm(Slope~Elevation, data=train, family=poisson())
summary(glm1)
library(e1071)
library(e1071)
library(e1071)
nb1 <- naiveBayes(Hillshade9am~., data=train)
nb1
df <- read.csv("data/titanic.csv", header=TRUE)
library(e1071)
nb1 <- naiveBayes(Slope~., data=train)
nb1
df <- read.csv("covtype.csv")
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
glm1 <- glm(Slope~Elevation, data=train, family=poisson())
summary(glm1)
library(e1071)
nb1 <- naiveBayes(Slope~., data=train)
nb1
df <- read.csv("covtype.csv")
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
hist(train$Soil_Type)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
glm1 <- glm(Slope~Elevation, data=train, family=poisson())
summary(glm1)
library(e1071)
nb1 <- naiveBayes(Slope~., data=train)
nb1
df <- read.csv("covtype.csv")
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
hist(train$Soil_Type)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
fun <- function(dataf){
glm1 <- glm(Cover_Type~., data=train, family="binomial")
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Species)
print(paste("accuracy = ", acc))
table(pred, test$Species)
}
fun(tree_type1)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
library(e1071)
nb1 <- naiveBayes(Slope~., data=train)
nb1
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
fun <- function(dataf){
glm1 <- glm(Cover_Type~., data=train, family="binomial")
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, test$Cover_Type)
}
fun(tree_type1)
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
fun <- function(dataf){
glm1 <- glm(Cover_Type~., data=train, family=poisson())
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, test$Cover_Type)
}
fun(tree_type1)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
df <- read.csv("covtype.csv")
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
hist(train$Soil_Type)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
fun <- function(dataf){
glm1 <- glm(Cover_Type~., data=train, family=gaussian())
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, test$Cover_Type)
}
fun(tree_type1)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
library(e1071)
nb1 <- naiveBayes(Slope~., data=train)
nb1
df <- read.csv("covtype.csv")
df$Cover_Type <- factor(df$Cover_Type)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
hist(train$Soil_Type)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
fun <- function(dataf){
glm1 <- glm(Cover_Type~., data=train, family=gaussian())
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, test$Cover_Type)
}
fun(tree_type1)
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
fun <- function(dataf){
glm1 <- glm(Cover_Type~., data=train, family="binomial")
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, test$Cover_Type)
}
fun(tree_type1)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
df <- read.csv("covtype.csv")
df$Cover_Type <- factor(df$Cover_Type)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Elevation)
df <- read.csv("covtype.csv")
df$Cover_Type <- factor(df$Cover_Type)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$class)
mode(train$cap.color)
str(train)
hist(train$Soil_Type)
df <- read.csv("covtype.csv")
df$Cover_Type <- factor(df$Cover_Type)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$Elevation)
mode(train$Cover_Type)
str(train)
hist(train$Elevation)
hist(train$Soil_Type)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
tree_type2 <- df
tree_type2$Cover_Type <- as.factor(ifelse (tree_type2$Cover_Type=="2",1,0))
tree_type3 <- df
tree_type3$Cover_Type <- as.factor(ifelse (tree_type3$Cover_Type=="3",1,0))
tree_type4 <- df
tree_type4$Cover_Type <- as.factor(ifelse (tree_type4$Cover_Type=="4",1,0))
tree_type5 <- df
tree_type5$Cover_Type <- as.factor(ifelse (tree_type5$Cover_Type=="5",1,0))
tree_type6 <- df
tree_type6$Cover_Type <- as.factor(ifelse (tree_type6$Cover_Type=="6",1,0))
tree_type7 <- df
tree_type7$Cover_Type <- as.factor(ifelse (tree_type7$Cover_Type=="7",1,0))
fun <- function(dataf, i){
train <- dataf[i,]
test <- dataf[-i,]
glm1 <- glm(Cover_Type~., data=train, family="binomial")
probs <- predict(glm1, newdata=test)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, test$Cover_Type)
}
fun(tree_type1, i)
fun(tree_type2, i)
fun(tree_type3, i)
fun(tree_type4, i)
fun(tree_type5, i)
fun(tree_type6, i)
fun(tree_type7, i)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
library(e1071)
nb1 <- naiveBayes(Cover_Type~., data=train)
nb1
pbayes <- predict(nb1, newdata=test, type="class")
table(pbayes, test$Cover_Type)
mode(pbayes==test$Cover_Type)
df <- read.csv("covtype.csv")
df$Cover_Type <- factor(df$Cover_Type)
i <- sample(1:nrow(df), nrow(df)*.80, replace=FALSE)
train <- df[i,]
test <- df[-i,]
head(train)
tail(train)
median(train$Elevation)
getmode <- function(d) {
uniqd <- unique(d)
uniqd[which.max(tabulate(match(d, uniqd)))]
}
getmode(train$Cover_Type)
getmode(train$Soil_Type)
str(train)
hist(train$Elevation)
hist(train$Soil_Type)
counts <- table(train$Cover_Type)
barplot(counts)
slices <- c(sum(train$Wilderness_Area1==1, na.rm=TRUE), sum(train$Wilderness_Area2==1, na.rm=TRUE), sum(train$Wilderness_Area3==1, na.rm=TRUE), sum(train$Wilderness_Area4==1, na.rm=TRUE))
labls <- c("Wilds 1","Wilds 2","Wilds 3","Wilds 4")
pie(slices,labels = labls, main="Types of Wild Area", col=c("green", "blue", "yellow", "red"))
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
tree_type2 <- df
tree_type2$Cover_Type <- as.factor(ifelse (tree_type2$Cover_Type=="2",1,0))
tree_type3 <- df
tree_type3$Cover_Type <- as.factor(ifelse (tree_type3$Cover_Type=="3",1,0))
tree_type4 <- df
tree_type4$Cover_Type <- as.factor(ifelse (tree_type4$Cover_Type=="4",1,0))
tree_type5 <- df
tree_type5$Cover_Type <- as.factor(ifelse (tree_type5$Cover_Type=="5",1,0))
tree_type6 <- df
tree_type6$Cover_Type <- as.factor(ifelse (tree_type6$Cover_Type=="6",1,0))
tree_type7 <- df
tree_type7$Cover_Type <- as.factor(ifelse (tree_type7$Cover_Type=="7",1,0))
fun <- function(dataf, i){
funtrain <- dataf[i,]
funtest <- dataf[-i,]
glm1 <- glm(Cover_Type~., data=funtrain, family="binomial")
probs <- predict(glm1, newdata=funtest)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==funtest$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, funtest$Cover_Type)
}
#fun(tree_type1, i)
#fun(tree_type2, i)
#fun(tree_type3, i)
#fun(tree_type4, i)
#un(tree_type5, i)
#fun(tree_type6, i)
#fun(tree_type7, i)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
library(e1071)
nb1 <- naiveBayes(Cover_Type~., data=train)
nb1
pbayes <- predict(nb1, newdata=test, type="class")
table(pbayes, test$Cover_Type)
getmode(pbayes==test$Cover_Type)
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
tree_type2 <- df
tree_type2$Cover_Type <- as.factor(ifelse (tree_type2$Cover_Type=="2",1,0))
tree_type3 <- df
tree_type3$Cover_Type <- as.factor(ifelse (tree_type3$Cover_Type=="3",1,0))
tree_type4 <- df
tree_type4$Cover_Type <- as.factor(ifelse (tree_type4$Cover_Type=="4",1,0))
tree_type5 <- df
tree_type5$Cover_Type <- as.factor(ifelse (tree_type5$Cover_Type=="5",1,0))
tree_type6 <- df
tree_type6$Cover_Type <- as.factor(ifelse (tree_type6$Cover_Type=="6",1,0))
tree_type7 <- df
tree_type7$Cover_Type <- as.factor(ifelse (tree_type7$Cover_Type=="7",1,0))
fun <- function(dataf, i){
funtrain <- dataf[i,]
funtest <- dataf[-i,]
glm1 <- glm(Cover_Type~., data=funtrain, family="binomial")
probs <- predict(glm1, newdata=funtest)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==funtest$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, funtest$Cover_Type)
}
#fun(tree_type1, i)
#fun(tree_type2, i)
#fun(tree_type3, i)
#fun(tree_type4, i)
#un(tree_type5, i)
#fun(tree_type6, i)
#fun(tree_type7, i)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
tree_type1 <- df
tree_type1$Cover_Type <- as.factor(ifelse (tree_type1$Cover_Type=="1",1,0))
tree_type2 <- df
tree_type2$Cover_Type <- as.factor(ifelse (tree_type2$Cover_Type=="2",1,0))
tree_type3 <- df
tree_type3$Cover_Type <- as.factor(ifelse (tree_type3$Cover_Type=="3",1,0))
tree_type4 <- df
tree_type4$Cover_Type <- as.factor(ifelse (tree_type4$Cover_Type=="4",1,0))
tree_type5 <- df
tree_type5$Cover_Type <- as.factor(ifelse (tree_type5$Cover_Type=="5",1,0))
tree_type6 <- df
tree_type6$Cover_Type <- as.factor(ifelse (tree_type6$Cover_Type=="6",1,0))
tree_type7 <- df
tree_type7$Cover_Type <- as.factor(ifelse (tree_type7$Cover_Type=="7",1,0))
fun <- function(dataf, i){
funtrain <- dataf[i,]
funtest <- dataf[-i,]
glm1 <- glm(Cover_Type~., data=funtrain, family="binomial")
probs <- predict(glm1, newdata=funtest)
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==funtest$Cover_Type)
print(paste("accuracy = ", acc))
table(pred, funtest$Cover_Type)
}
fun(tree_type1, i)
fun(tree_type2, i)
fun(tree_type3, i)
fun(tree_type4, i)
fun(tree_type5, i)
fun(tree_type6, i)
fun(tree_type7, i)
#glm1 <- glm(Slope~Elevation, data=train, family=poisson())
#summary(glm1)
